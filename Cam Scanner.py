# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_k5PtGDnsgQ1j8gwvMUcFw6xzuPC7t9e
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import cv2

# %matplotlib inline

image_path = "Bill.jpg"
img = cv2.imread(image_path)
print(img.shape)
img = cv2.resize(img, (800, 800))
print(img.shape)
plt.imshow(img)
plt.show()

orig = img.copy()
grayimg = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)
plt.imshow(grayimg, cmap="gray")
plt.show()

blurimage = cv2.GaussianBlur(grayimg, (5,5), 0)
plt.imshow(blurimage, cmap="gray")
plt.show()

regen_image = cv2.cvtColor(blurimage, cv2.COLOR_GRAY2BGR)
plt.imshow(regen_image)
plt.show()

plt.imshow(orig)
plt.show()

print(regen_image.shape)

edge = cv2.Canny(blurimage, 0 ,50)
orig_edge = edge.copy()
plt.imshow(orig_edge)
plt.title("Edge Detection")
plt.show()

contours, _ = cv2.findContours(edge, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
print(len(contours))
contours = sorted(contours, reverse = True, key = cv2.contourArea)

for c in contours:
  p = cv2.arcLength(c, True)
  approx = cv2.approxPolyDP(c, 0.01*p, True)

  if len(approx) == 4:
    target = approx
    break

print(target.shape)

def reorder(h):
  h = h.reshape((4,2))
  print(h)

  hnew = np.zeros((4,2), dtype= np.float32)
  add = h.sum(axis = 1)
  hnew[3] = h[np.argmax(add)]
  hnew[1] = h[np.argmax(add)]

  diff = np.diff(h, axis =1)
  hnew[0] = h[np.argmax(diff)]
  hnew[2] = h[np.argmax(diff)]

  return hnew

reorder = reorder(target)
print("*************")
print(reorder)

input_representation = reorder
output_map = np.float32([[0,0],[800,0],[800,800],[0,800]])

M = cv2.getPerspectiveTransform(input_representation, output_map)
ans= cv2.warpPerspective(orig, M, (800,800))

plt.imshow(ans)
plt.title("Edge Detection")
plt.show()